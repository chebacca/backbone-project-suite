# BACKBONE v14.2 Project Rules

## üî• CRITICAL: WEB-ONLY FIREBASE PROJECT
This is a **WEB-ONLY** project that deploys to Firebase hosting. 
**DO NOT** attempt to run local development servers or Docker containers.

### Deployment Architecture
- **Frontend**: Static files deployed to Firebase Hosting (backbone-client.web.app)
- **Backend**: Firebase Functions + Firestore (web-only mode)
- **Package Manager**: npm (not pnpm for this project)
- **Build Process**: esbuild ‚Üí Firebase-ready static files

### ‚úÖ PRODUCTION DEPLOYMENT STATUS
- **Successfully Deployed**: December 2024
- **Web App URL**: https://backbone-client.web.app
- **API Base URL**: https://api-oup5qxogca-uc.a.run.app
- **Firebase Project**: backbone-logic
- **Hosting Target**: backbone-client (main web app)
- **Secondary Target**: backbone-logic (licensing website)

### Key Commands
```bash
# Build web application (from project root)
cd Dashboard-v14_2/apps/web && npm run build

# Deploy to Firebase (from Dashboard-v14_2 directory)
cd Dashboard-v14_2 && firebase deploy --only hosting

# Deploy both hosting and functions
cd Dashboard-v14_2 && firebase deploy --only hosting,functions

# Health check
curl https://us-central1-backbone-logic.cloudfunctions.net/healthCheck
```

### üö® CRITICAL: Correct Directory Structure for Commands
- **Build Command**: Must run from `Dashboard-v14_2/apps/web/` directory
- **Deploy Command**: Must run from `Dashboard-v14_2/` directory (NOT from apps/web/)
- **Firebase Config**: Located in `Dashboard-v14_2/firebase.json`
- **Public Directory**: Created at `Dashboard-v14_2/apps/web/public/` after build

### üìÅ Working Directory Management
```bash
# Always start from project root
cd "/Users/chebrooks/Documents/IDE_Project/BACKBONE 14_2 & Website 2 full project files"

# For building (navigate to web app)
cd Dashboard-v14_2/apps/web && npm run build

# For deploying (navigate back to Dashboard-v14_2)
cd ../../ && firebase deploy --only hosting

# Alternative: Use absolute paths to avoid confusion
cd "/Users/chebrooks/Documents/IDE_Project/BACKBONE 14_2 & Website 2 full project files/Dashboard-v14_2/apps/web" && npm run build
cd "/Users/chebrooks/Documents/IDE_Project/BACKBONE 14_2 & Website 2 full project files/Dashboard-v14_2" && firebase deploy --only hosting
```

### ‚ö†Ô∏è Common Path Issues to Avoid
- ‚ùå Running `firebase deploy` from `apps/web/` directory (firebase.json not found)
- ‚ùå Running `npm run build` from `Dashboard-v14_2/` directory (package.json not found)
- ‚ùå Using relative paths without proper navigation
- ‚ùå Forgetting to navigate back to correct directory after build

### üéØ Firebase Hosting Configuration
```json
// firebase.json structure
{
  "hosting": [
    {
      "target": "backbone-client",
      "public": "apps/web/public",
      "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
    }
  ]
}
```

### üöÄ Deployment Targets
- **Primary**: `backbone-client` ‚Üí https://backbone-client.web.app (main dashboard)
- **Secondary**: `backbone-logic` ‚Üí https://backbone-logic.web.app (licensing website)
- **Functions**: Deploy to `us-central1` region

### What NOT to do
- ‚ùå Do not run `npm run dev` or development servers
- ‚ùå Do not attempt Docker deployments
- ‚ùå Do not try to start local backend services
- ‚ùå Do not use localhost URLs in production

### Project Structure
- `Dashboard-v14_2/` - Main web application (Firebase-ready)
- `dashboard-v14-licensing-website 2/` - Licensing website
- `shared-mpc-library/` - Documentation & best practices
- `deployment/` - Firebase deployment scripts
- `public/` - Firebase hosting directory (created by build)

### Authentication & Services
- Firebase Authentication (web-only)
- Firestore for data storage
- Firebase Functions for backend logic
- All services configured for web-only production mode

### Build Issues
- If encountering "require is not defined" errors, the require polyfill is already in place
- Use browser-compatible imports only
- No bundling needed - Firebase hosting serves ES modules directly

### üîß COMPLETE FIREBASE FUNCTIONS IMPLEMENTATION
All backend API endpoints are implemented and deployed:
- **Authentication**: Login, register, user management
- **Team Members**: Full CRUD with project assignments
- **Organizations**: Multi-tenant organization management
- **Projects & Sessions**: Complete project lifecycle
- **AI Integration**: Gemini API and AI agents
- **Licensing**: License validation and subscriptions
- **Payments**: Stripe integration for subscriptions
- **Media**: File upload and management
- **Reports**: Analytics and reporting system
- **Utilities**: Health checks, migrations, cleanup

### üõ°Ô∏è SECURITY & ACCESS CONTROL
- Firebase Auth token verification on all endpoints
- Organization-based data isolation
- Role-based access control (admin, member, viewer)
- Firestore security rules for all collections
- Input validation and sanitization

### üìã API ENDPOINT PATTERNS
```typescript
// Authentication required for all /api/* endpoints
Authorization: Bearer <firebase-id-token>

// Consistent error response format
{
  success: false,
  error: "Human readable message",
  errorDetails: "Technical details"
}

// Success response format
{
  success: true,
  data: { ... }
}
```

### üìù File Naming Conventions
- **Firebase Scripts**: Always use `.cjs` extension for Firebase-related scripts
- **Node.js Scripts**: Use `.cjs` for CommonJS modules that need to run in Node.js environment
- **Firebase Functions**: Use `.js` or `.ts` as appropriate for function code
- **Configuration Files**: Use `.json` for Firebase config files

### üî• FIREBASE MCP TOOL PRIORITY
**CRITICAL**: This is a Firebase-only project. When responding to prompts, ALWAYS prioritize Firebase MCP tools over other approaches:

#### Primary Firebase MCP Tools (Use First):
- `firebase_get_project` - Get current project info
- `firebase_get_environment` - Check Firebase environment
- `firestore_query_collection` - Query Firestore data
- `firestore_get_documents` - Get specific documents
- `firestore_list_collections` - List available collections
- `auth_get_user` - Get user information
- `auth_list_users` - List project users
- `firebase_consult_assistant` - Firebase-specific AI assistance

#### When to Use Firebase MCP vs Other Tools:
- ‚úÖ **Firebase MCP FIRST** for: Data queries, user management, project info, Firestore operations
- ‚úÖ **Codebase search** for: Finding existing code patterns, understanding implementations
- ‚úÖ **Terminal commands** for: Building, deploying, npm operations
- ‚ùå **Avoid** external API calls when Firebase MCP can handle the task

#### Firebase MCP Server Configuration:
- **firebase-dashboard**: Main app with full Firebase services
- **firebase-licensing**: Licensing website configuration  
- **firebase-analytics**: Debug and analytics operations

#### Firebase MCP Usage Patterns:
```typescript
// 1. Always start with environment check
firebase_get_environment() ‚Üí Check current project/auth state

// 2. For data operations, use Firestore MCP tools
firestore_query_collection() ‚Üí Query collections with filters
firestore_get_documents() ‚Üí Get specific documents
firestore_list_collections() ‚Üí Discover available collections

// 3. For user management, use Auth MCP tools  
auth_get_user() ‚Üí Get user by email/UID
auth_list_users() ‚Üí List all users
auth_set_claim() ‚Üí Set custom claims

// 4. For project management
firebase_get_project() ‚Üí Get project details
firebase_list_apps() ‚Üí List registered apps
```

#### Prompt Response Priority:
1. **Firebase MCP tools** (data, users, project info)
2. **Codebase search** (find existing patterns)
3. **Terminal commands** (build, deploy, npm)
4. **File operations** (read, edit, create)
5. **External APIs** (only when Firebase MCP insufficient)

### üî• FIREBASE PERSISTENCE ARCHITECTURE (NEW)
**CRITICAL**: Enhanced Firebase system ensures seamless operation after WebOnlyStartupFlow:

#### Core Firebase Persistence Components:
- **Firebase Persistence Manager**: Maintains auth state across app transitions
- **Firebase Auto-Initializer**: Ensures services are ready when main app loads  
- **Global Firebase Provider**: Wraps main app with Firebase context
- **Global Collections Manager**: Unified access to all Firebase collections
- **Health Monitoring**: Automatic detection and recovery from issues
- **Token Management**: Automatic refresh and validation (every 30 minutes)

#### Firebase Persistence Integration:
```typescript
// Auto-initializes when main app loads
import './services/FirebaseAutoInitializer';

// Use in components
const { isAuthenticated, user, servicesReady } = useGlobalFirebase();

// Unified collection access
const projects = await globalFirebaseCollectionsManager.getCollection('projects', {
  organizationId: 'org-123',
  where: [{ field: 'status', operator: '==', value: 'active' }]
});
```

#### Firebase Service Lifecycle:
1. **WebOnlyStartupFlow** ‚Üí Sets tokens and launches project
2. **FirebaseAutoInitializer** ‚Üí Ensures all services ready
3. **GlobalFirebaseProvider** ‚Üí Provides context to all components
4. **FirebasePersistenceManager** ‚Üí Monitors and maintains services
5. **CollectionsManager** ‚Üí Provides unified data access

#### Key Benefits:
- ‚úÖ **No service interruption** after startup flow completes
- ‚úÖ **Automatic token refresh** keeps auth valid
- ‚úÖ **Health monitoring** with auto-recovery
- ‚úÖ **Consistent data access** across all components
- ‚úÖ **Organization-scoped** data filtering
- ‚úÖ **Real-time updates** and smart caching

### Consulting MPC Library
Always reference the shared-mpc-library for:
- Complete Firebase Functions implementation details
- Firebase deployment patterns
- Web-only authentication flows
- Production build configurations
- Error handling best practices
- API integration patterns
- **NEW**: Firebase Persistence Architecture patterns (`FIREBASE_PERSISTENCE_ARCHITECTURE_MPC.md`)
