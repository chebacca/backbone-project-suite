#!/bin/bash

# ============================================================================
# FIRESTORE COLLECTION PRE-COMMIT HOOK
# ============================================================================
# 
# This hook automatically scans for new Firestore collections and updates
# security rules before each commit to prevent permission issues.
# 
# Installation: 
#   cp tools/firestore-automation/git-hooks/pre-commit .git/hooks/pre-commit
#   chmod +x .git/hooks/pre-commit
# ============================================================================

set -e

echo "üîç Running Firestore collection validation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project paths
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
SCANNER_PATH="$PROJECT_ROOT/tools/firestore-automation/collection-scanner.js"
RULES_PATH="$PROJECT_ROOT/Dashboard-v14_2/firestore-comprehensive.rules"

# Check if scanner exists
if [ ! -f "$SCANNER_PATH" ]; then
    echo -e "${RED}‚ùå Collection scanner not found at: $SCANNER_PATH${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Skipping Firestore validation${NC}"
    exit 0
fi

# Check if Node.js is available
if ! command -v node &> /dev/null; then
    echo -e "${RED}‚ùå Node.js not found. Please install Node.js to run Firestore validation.${NC}"
    exit 1
fi

# Get list of modified files that might contain collection references
MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$' || true)

if [ -z "$MODIFIED_FILES" ]; then
    echo -e "${GREEN}‚úÖ No TypeScript/JavaScript files modified. Skipping collection scan.${NC}"
    exit 0
fi

echo -e "${BLUE}üìÇ Modified files that might contain collections:${NC}"
echo "$MODIFIED_FILES" | sed 's/^/  - /'

# Run comprehensive Firebase scan
echo -e "${BLUE}üîç Scanning Firebase components (collections, functions, indexes)...${NC}"
FIREBASE_SCANNER_PATH="$PROJECT_ROOT/tools/firestore-automation/firebase-scanner.js"

if [ -f "$FIREBASE_SCANNER_PATH" ]; then
    # Use comprehensive Firebase scanner
    SCAN_OUTPUT=$(node "$FIREBASE_SCANNER_PATH" 2>&1)
    SCAN_EXIT_CODE=$?
    
    if [ $SCAN_EXIT_CODE -ne 0 ]; then
        echo -e "${RED}‚ùå Firebase scan failed:${NC}"
        echo "$SCAN_OUTPUT"
        exit 1
    fi
    
    echo "$SCAN_OUTPUT"
else
    # Fallback to collection scanner only
    echo -e "${BLUE}üîç Scanning for Firestore collections (functions/indexes scanner not available)...${NC}"
    SCAN_OUTPUT=$(node "$SCANNER_PATH" 2>&1)
    SCAN_EXIT_CODE=$?

    if [ $SCAN_EXIT_CODE -ne 0 ]; then
        echo -e "${RED}‚ùå Collection scan failed:${NC}"
        echo "$SCAN_OUTPUT"
        exit 1
    fi

    echo "$SCAN_OUTPUT"
fi

# Check if any new collections were found by comparing with last scan
LATEST_SCAN="$PROJECT_ROOT/tools/firestore-automation/reports/latest-scan.json"
PREVIOUS_SCAN="$PROJECT_ROOT/tools/firestore-automation/reports/previous-scan.json"

# Backup current scan as previous
if [ -f "$LATEST_SCAN" ]; then
    cp "$LATEST_SCAN" "$PREVIOUS_SCAN" 2>/dev/null || true
fi

# Run new scan and save results
node "$SCANNER_PATH" > /dev/null 2>&1

# Compare scans if both exist
if [ -f "$LATEST_SCAN" ] && [ -f "$PREVIOUS_SCAN" ]; then
    # Extract collection arrays and compare
    CURRENT_COLLECTIONS=$(node -e "
        const fs = require('fs');
        try {
            const data = JSON.parse(fs.readFileSync('$LATEST_SCAN', 'utf8'));
            console.log(JSON.stringify(data.collections.sort()));
        } catch(e) {
            console.log('[]');
        }
    ")
    
    PREVIOUS_COLLECTIONS=$(node -e "
        const fs = require('fs');
        try {
            const data = JSON.parse(fs.readFileSync('$PREVIOUS_SCAN', 'utf8'));
            console.log(JSON.stringify(data.collections.sort()));
        } catch(e) {
            console.log('[]');
        }
    ")
    
    if [ "$CURRENT_COLLECTIONS" != "$PREVIOUS_COLLECTIONS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  New Firebase components detected! Updating configuration...${NC}"
        
        # Generate new configuration (rules, indexes, functions config)
        if [ -f "$FIREBASE_SCANNER_PATH" ]; then
            node "$FIREBASE_SCANNER_PATH" --generate-all
        else
            node "$SCANNER_PATH" --generate-rules
        fi
        
        # Add updated files to commit
        git add "$RULES_PATH"
        
        # Add indexes file if it exists
        INDEXES_PATH="$PROJECT_ROOT/Dashboard-v14_2/firestore-comprehensive.indexes.json"
        if [ -f "$INDEXES_PATH" ]; then
            git add "$INDEXES_PATH"
            echo -e "${GREEN}‚úÖ Firestore indexes updated and added to commit${NC}"
        fi
        
        # Add firebase.json if it was updated
        FIREBASE_JSON_PATH="$PROJECT_ROOT/Dashboard-v14_2/firebase.json"
        if [ -f "$FIREBASE_JSON_PATH" ]; then
            git add "$FIREBASE_JSON_PATH"
            echo -e "${GREEN}‚úÖ Firebase configuration updated and added to commit${NC}"
        fi
        
        echo -e "${GREEN}‚úÖ Firebase components updated and added to commit${NC}"
        
        # Show what changed
        NEW_COLLECTIONS=$(node -e "
            const current = $CURRENT_COLLECTIONS;
            const previous = $PREVIOUS_COLLECTIONS;
            const newOnes = current.filter(c => !previous.includes(c));
            if (newOnes.length > 0) {
                console.log('New collections: ' + newOnes.join(', '));
            }
        ")
        
        if [ -n "$NEW_COLLECTIONS" ]; then
            echo -e "${BLUE}üìã $NEW_COLLECTIONS${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ No new collections detected${NC}"
    fi
fi

# Validate rules syntax if Firebase CLI is available
if command -v firebase &> /dev/null; then
    echo -e "${BLUE}üõ°Ô∏è  Validating Firestore rules syntax...${NC}"
    
    cd "$PROJECT_ROOT/Dashboard-v14_2"
    
    # Simple syntax check without deployment
    if [ -f "firestore-comprehensive.rules" ]; then
        echo -e "${GREEN}‚úÖ Firestore rules file exists and was generated successfully${NC}"
        echo -e "${YELLOW}üí° Rules will be validated during deployment${NC}"
    else
        echo -e "${RED}‚ùå Firestore rules file not found${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Firebase CLI not found. Skipping rules syntax validation.${NC}"
fi

# Final success message
echo -e "${GREEN}‚úÖ Firestore collection validation complete!${NC}"

exit 0
